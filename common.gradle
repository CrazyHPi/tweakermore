apply plugin: 'maven-publish'
apply plugin: 'fabric-loom'
apply plugin: 'io.github.juuxel.loom-quiltflower'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'me.fallenbreath.yamlang'

int mcVersion = 1

preprocess {
	mcVersion = vars.get()["MC"]
	tabIndentation = true
}

repositories {
	maven {
		url 'https://masa.dy.fi/maven'
	}
	maven {
		url 'https://maven.terraformersmc.com/releases'
	}
	maven {
		url 'https://www.cursemaven.com'
	}
	maven {
		url 'https://jitpack.io'
	}
}

// list of (dependencyNotation -> should use modImplementation)
def mod_dependencies = [
		// - loom doesn't remap base class method (method_10263) call of fi.dy.masa.malilib.util.SubChunkPos in
		//   fi.dy.masa.litematica.render.schematic.WorldRendererSchematic.setupTerrain, resulting in a crash in dev env
		//   so we have to disable litematica in [1.15, 1.17) at runtime
		["curse.maven:tweakeroo-297344:${project.tweakeroo_file_id}"       , true],
		["curse.maven:item-scroller-242064:${project.itemscroller_file_id}", true],
		["curse.maven:minihud-244260:${project.minihud_file_id}"           , true],
		["curse.maven:litematica-308892:${project.litematica_file_id}"     , mcVersion < 11500 || 11700 <= mcVersion],

		// we're using modmenu for mc 1.15.2 for 1.14.4, so we use modCompileOnly
		["com.terraformersmc:modmenu:${project.mod_menu_version}"          , mcVersion >= 11500],
]

dependencies {
	// loom
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// compact stuffs
	if (11700 <= mcVersion && mcVersion < 11800) {
		configurations.all {
			// 1.17 litematica mod crashes in dev env due to guava's version is set to 27.1-jre
			resolutionStrategy.force 'com.google.guava:guava:21.0'
		}
	}

	// runtime mods
	modRuntimeOnly(mcVersion < 11900 ? "com.github.astei:lazydfu:0.1.2" : "com.github.Fallen-Breath:lazydfu:a7cfc44c0c")

	// dependencies
	modImplementation("fi.dy.masa.malilib:${project.malilib_version}") {
		exclude group: 'io.github.prospector', module: 'modmenu'
	}

	mod_dependencies.forEach {item ->
		def dependencyNotation = item[0]
		def activatedInRuntime = item[1]
		if (activatedInRuntime) {
			modImplementation dependencyNotation
		}
		else {
			modCompileOnly dependencyNotation
		}
	}

	// libraries
	include(modImplementation("com.github.Fallen-Breath:conditional-mixin:${project.conditionalmixin_version}"))
	annotationProcessor(include(implementation("com.github.LlamaLad7:MixinExtras:${project.mixin_extra_version}")))
}

loom {
	accessWidenerPath = file("tweakermore.accesswidener")

	runConfigs.all {
		runDir '../../run'
	}
	runConfigs.client {
		// to make sure it generates all "Minecraft Client (:subproject_name)" applications
		ideConfigGenerated = true
	}
	runs {
		mixinAuditClient {
			client()
			vmArgs '-Dtweakermore.mixin_audit=true'
			ideConfigGenerated false
		}
	}
}

remapJar {
	remapperIsolation = true
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

String versionSuffix = ''
if (System.getenv("BUILD_RELEASE") != "true") {
	String buildNumber = System.getenv("BUILD_ID")
	versionSuffix += buildNumber != null ? ('+build.' + buildNumber) : '-SHAPSHOT'
}
String fullModVersion = project.mod_version + versionSuffix

version = 'v' + fullModVersion
group = project.parent.maven_group
archivesBaseName = project.parent.archives_base_name + '-mc' + project.minecraft_version

processResources {
	from "tweakermore.accesswidener"

	inputs.property "version", fullModVersion

	filesMatching("fabric.mod.json") {
		def valueMap = [
				"version": fullModVersion,
				"minecraft_dependency": project.minecraft_dependency,
				"malilib_dependency": project.malilib_dependency,
		]
		expand valueMap
	}

	// the mixin ref map json file name is based on the archivesBaseName which is based on subproject name
	// so we need to adjust it
	filesMatching("tweakermore.optifine_mixins.json") {
		def valueMap = [
				"archivesBaseName": archivesBaseName,
		]
		expand valueMap
	}
}

yamlang {
	targetSourceSets = [sourceSets.main]
	inputDir = 'assets/tweakermore/lang'
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.compilerArgs << "-Xlint:deprecation"
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("../../LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId archivesBaseName

			from components.java
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
