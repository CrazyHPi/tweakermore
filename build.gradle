plugins {
	id 'maven-publish'
	id 'com.github.hierynomus.license' version '0.16.1' apply false
    id 'fabric-loom' version '1.4-SNAPSHOT' apply false

	// https://github.com/ReplayMod/preprocessor
	// https://github.com/Fallen-Breath/preprocessor
	id 'com.replaymod.preprocess' version '20c7ec554a'

	// https://github.com/Fallen-Breath/yamlang
	id 'me.fallenbreath.yamlang' version '1.3.0' apply false
}

preprocess {
	def mc114  = createNode('1.14.4', 1_14_04, 'yarn')
	def mc115  = createNode('1.15.2', 1_15_02, 'yarn')
	def mc116  = createNode('1.16.5', 1_16_05, 'yarn')
	def mc117  = createNode('1.17.1', 1_17_01, 'yarn')
	def mc118  = createNode('1.18.2', 1_18_02, 'yarn')
	def mc1192 = createNode('1.19.2', 1_19_02, 'yarn')  // TODO: drop support when mc1.21 is out
	def mc1193 = createNode('1.19.3', 1_19_03, 'yarn')  // TODO: drop support when mc1.21 is out
	def mc1194 = createNode('1.19.4', 1_19_04, 'yarn')
	def mc1201 = createNode('1.20.1', 1_20_01, 'yarn')
	def mc1202 = createNode('1.20.2', 1_20_02, 'yarn')

	mc115.link(mc114, null)
	mc115.link(mc116, file('versions/mapping-1.15-1.16.txt'))
	mc116.link(mc117, file('versions/mapping-1.16-1.17.txt'))
	mc117.link(mc118, file('versions/mapping-1.17-1.18.txt'))
	mc118.link(mc1192, file('versions/mapping-1.18-1.19.txt'))
	mc1192.link(mc1193, file('versions/mapping-1.19.2-1.19.3.txt'))
	mc1193.link(mc1194, file('versions/mapping-1.19.3-1.19.4.txt'))
	mc1194.link(mc1201, file('versions/mapping-1.19.4-1.20.1.txt'))
	mc1201.link(mc1202, file('versions/mapping-1.20.1-1.20.2.txt'))
}

tasks.register('buildAndGather') {
	subprojects {
		dependsOn project.tasks.named('build').get()
	}
	doFirst {
		println 'Gathering builds'
		def buildLibs = {
			p -> p.buildDir.toPath().resolve('libs')
		}
		delete fileTree(buildLibs(rootProject)) {
			include '*'
		}
		subprojects {
			copy {
				from(buildLibs(project)) {
					include '*.jar'
					exclude '*-dev.jar', '*-sources.jar'
				}
				into buildLibs(rootProject)
				duplicatesStrategy DuplicatesStrategy.INCLUDE
			}
		}
	}
}

tasks.register('cleanPreprocessSources') {
	doFirst {
		subprojects {
			def path = project.projectDir.toPath().resolve('build/preprocessed')
			if (path.toFile().isDirectory()) {
				path.toFile().deleteDir()
			}
		}
	}
}
